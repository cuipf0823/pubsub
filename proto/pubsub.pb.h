// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pubsub.proto

#ifndef PROTOBUF_pubsub_2eproto__INCLUDED
#define PROTOBUF_pubsub_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pubsub {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pubsub_2eproto();
void protobuf_AssignDesc_pubsub_2eproto();
void protobuf_ShutdownFile_pubsub_2eproto();

class CSSubscribeTopicReq;
class CSSubscribeTopicRsp;
class CSPublishTopicReq;
class CSPublishTopicRsp;
class CSPublishTopicNtf;

// ===================================================================

class CSSubscribeTopicReq : public ::google::protobuf::Message {
 public:
  CSSubscribeTopicReq();
  virtual ~CSSubscribeTopicReq();

  CSSubscribeTopicReq(const CSSubscribeTopicReq& from);

  inline CSSubscribeTopicReq& operator=(const CSSubscribeTopicReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSSubscribeTopicReq& default_instance();

  void Swap(CSSubscribeTopicReq* other);

  // implements Message ----------------------------------------------

  CSSubscribeTopicReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSSubscribeTopicReq& from);
  void MergeFrom(const CSSubscribeTopicReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes topic = 1;
  inline bool has_topic() const;
  inline void clear_topic();
  static const int kTopicFieldNumber = 1;
  inline const ::std::string& topic() const;
  inline void set_topic(const ::std::string& value);
  inline void set_topic(const char* value);
  inline void set_topic(const void* value, size_t size);
  inline ::std::string* mutable_topic();
  inline ::std::string* release_topic();
  inline void set_allocated_topic(::std::string* topic);

  // @@protoc_insertion_point(class_scope:pubsub.CSSubscribeTopicReq)
 private:
  inline void set_has_topic();
  inline void clear_has_topic();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* topic_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pubsub_2eproto();
  friend void protobuf_AssignDesc_pubsub_2eproto();
  friend void protobuf_ShutdownFile_pubsub_2eproto();

  void InitAsDefaultInstance();
  static CSSubscribeTopicReq* default_instance_;
};
// -------------------------------------------------------------------

class CSSubscribeTopicRsp : public ::google::protobuf::Message {
 public:
  CSSubscribeTopicRsp();
  virtual ~CSSubscribeTopicRsp();

  CSSubscribeTopicRsp(const CSSubscribeTopicRsp& from);

  inline CSSubscribeTopicRsp& operator=(const CSSubscribeTopicRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSSubscribeTopicRsp& default_instance();

  void Swap(CSSubscribeTopicRsp* other);

  // implements Message ----------------------------------------------

  CSSubscribeTopicRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSSubscribeTopicRsp& from);
  void MergeFrom(const CSSubscribeTopicRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 status_code = 1;
  inline bool has_status_code() const;
  inline void clear_status_code();
  static const int kStatusCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 status_code() const;
  inline void set_status_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pubsub.CSSubscribeTopicRsp)
 private:
  inline void set_has_status_code();
  inline void clear_has_status_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 status_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pubsub_2eproto();
  friend void protobuf_AssignDesc_pubsub_2eproto();
  friend void protobuf_ShutdownFile_pubsub_2eproto();

  void InitAsDefaultInstance();
  static CSSubscribeTopicRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSPublishTopicReq : public ::google::protobuf::Message {
 public:
  CSPublishTopicReq();
  virtual ~CSPublishTopicReq();

  CSPublishTopicReq(const CSPublishTopicReq& from);

  inline CSPublishTopicReq& operator=(const CSPublishTopicReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSPublishTopicReq& default_instance();

  void Swap(CSPublishTopicReq* other);

  // implements Message ----------------------------------------------

  CSPublishTopicReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSPublishTopicReq& from);
  void MergeFrom(const CSPublishTopicReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes topic = 1;
  inline bool has_topic() const;
  inline void clear_topic();
  static const int kTopicFieldNumber = 1;
  inline const ::std::string& topic() const;
  inline void set_topic(const ::std::string& value);
  inline void set_topic(const char* value);
  inline void set_topic(const void* value, size_t size);
  inline ::std::string* mutable_topic();
  inline ::std::string* release_topic();
  inline void set_allocated_topic(::std::string* topic);

  // required bytes content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:pubsub.CSPublishTopicReq)
 private:
  inline void set_has_topic();
  inline void clear_has_topic();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* topic_;
  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_pubsub_2eproto();
  friend void protobuf_AssignDesc_pubsub_2eproto();
  friend void protobuf_ShutdownFile_pubsub_2eproto();

  void InitAsDefaultInstance();
  static CSPublishTopicReq* default_instance_;
};
// -------------------------------------------------------------------

class CSPublishTopicRsp : public ::google::protobuf::Message {
 public:
  CSPublishTopicRsp();
  virtual ~CSPublishTopicRsp();

  CSPublishTopicRsp(const CSPublishTopicRsp& from);

  inline CSPublishTopicRsp& operator=(const CSPublishTopicRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSPublishTopicRsp& default_instance();

  void Swap(CSPublishTopicRsp* other);

  // implements Message ----------------------------------------------

  CSPublishTopicRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSPublishTopicRsp& from);
  void MergeFrom(const CSPublishTopicRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 status_code = 1;
  inline bool has_status_code() const;
  inline void clear_status_code();
  static const int kStatusCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 status_code() const;
  inline void set_status_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pubsub.CSPublishTopicRsp)
 private:
  inline void set_has_status_code();
  inline void clear_has_status_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 status_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_pubsub_2eproto();
  friend void protobuf_AssignDesc_pubsub_2eproto();
  friend void protobuf_ShutdownFile_pubsub_2eproto();

  void InitAsDefaultInstance();
  static CSPublishTopicRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSPublishTopicNtf : public ::google::protobuf::Message {
 public:
  CSPublishTopicNtf();
  virtual ~CSPublishTopicNtf();

  CSPublishTopicNtf(const CSPublishTopicNtf& from);

  inline CSPublishTopicNtf& operator=(const CSPublishTopicNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSPublishTopicNtf& default_instance();

  void Swap(CSPublishTopicNtf* other);

  // implements Message ----------------------------------------------

  CSPublishTopicNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSPublishTopicNtf& from);
  void MergeFrom(const CSPublishTopicNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes topic = 1;
  inline bool has_topic() const;
  inline void clear_topic();
  static const int kTopicFieldNumber = 1;
  inline const ::std::string& topic() const;
  inline void set_topic(const ::std::string& value);
  inline void set_topic(const char* value);
  inline void set_topic(const void* value, size_t size);
  inline ::std::string* mutable_topic();
  inline ::std::string* release_topic();
  inline void set_allocated_topic(::std::string* topic);

  // required bytes content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:pubsub.CSPublishTopicNtf)
 private:
  inline void set_has_topic();
  inline void clear_has_topic();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* topic_;
  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_pubsub_2eproto();
  friend void protobuf_AssignDesc_pubsub_2eproto();
  friend void protobuf_ShutdownFile_pubsub_2eproto();

  void InitAsDefaultInstance();
  static CSPublishTopicNtf* default_instance_;
};
// ===================================================================


// ===================================================================

// CSSubscribeTopicReq

// required bytes topic = 1;
inline bool CSSubscribeTopicReq::has_topic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSSubscribeTopicReq::set_has_topic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSSubscribeTopicReq::clear_has_topic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSSubscribeTopicReq::clear_topic() {
  if (topic_ != &::google::protobuf::internal::kEmptyString) {
    topic_->clear();
  }
  clear_has_topic();
}
inline const ::std::string& CSSubscribeTopicReq::topic() const {
  return *topic_;
}
inline void CSSubscribeTopicReq::set_topic(const ::std::string& value) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
}
inline void CSSubscribeTopicReq::set_topic(const char* value) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
}
inline void CSSubscribeTopicReq::set_topic(const void* value, size_t size) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    topic_ = new ::std::string;
  }
  topic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSSubscribeTopicReq::mutable_topic() {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    topic_ = new ::std::string;
  }
  return topic_;
}
inline ::std::string* CSSubscribeTopicReq::release_topic() {
  clear_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = topic_;
    topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CSSubscribeTopicReq::set_allocated_topic(::std::string* topic) {
  if (topic_ != &::google::protobuf::internal::kEmptyString) {
    delete topic_;
  }
  if (topic) {
    set_has_topic();
    topic_ = topic;
  } else {
    clear_has_topic();
    topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CSSubscribeTopicRsp

// required uint32 status_code = 1;
inline bool CSSubscribeTopicRsp::has_status_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSSubscribeTopicRsp::set_has_status_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSSubscribeTopicRsp::clear_has_status_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSSubscribeTopicRsp::clear_status_code() {
  status_code_ = 0u;
  clear_has_status_code();
}
inline ::google::protobuf::uint32 CSSubscribeTopicRsp::status_code() const {
  return status_code_;
}
inline void CSSubscribeTopicRsp::set_status_code(::google::protobuf::uint32 value) {
  set_has_status_code();
  status_code_ = value;
}

// -------------------------------------------------------------------

// CSPublishTopicReq

// required bytes topic = 1;
inline bool CSPublishTopicReq::has_topic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSPublishTopicReq::set_has_topic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSPublishTopicReq::clear_has_topic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSPublishTopicReq::clear_topic() {
  if (topic_ != &::google::protobuf::internal::kEmptyString) {
    topic_->clear();
  }
  clear_has_topic();
}
inline const ::std::string& CSPublishTopicReq::topic() const {
  return *topic_;
}
inline void CSPublishTopicReq::set_topic(const ::std::string& value) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
}
inline void CSPublishTopicReq::set_topic(const char* value) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
}
inline void CSPublishTopicReq::set_topic(const void* value, size_t size) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    topic_ = new ::std::string;
  }
  topic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSPublishTopicReq::mutable_topic() {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    topic_ = new ::std::string;
  }
  return topic_;
}
inline ::std::string* CSPublishTopicReq::release_topic() {
  clear_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = topic_;
    topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CSPublishTopicReq::set_allocated_topic(::std::string* topic) {
  if (topic_ != &::google::protobuf::internal::kEmptyString) {
    delete topic_;
  }
  if (topic) {
    set_has_topic();
    topic_ = topic;
  } else {
    clear_has_topic();
    topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes content = 2;
inline bool CSPublishTopicReq::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSPublishTopicReq::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSPublishTopicReq::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSPublishTopicReq::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& CSPublishTopicReq::content() const {
  return *content_;
}
inline void CSPublishTopicReq::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void CSPublishTopicReq::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void CSPublishTopicReq::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSPublishTopicReq::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* CSPublishTopicReq::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CSPublishTopicReq::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CSPublishTopicRsp

// required uint32 status_code = 1;
inline bool CSPublishTopicRsp::has_status_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSPublishTopicRsp::set_has_status_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSPublishTopicRsp::clear_has_status_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSPublishTopicRsp::clear_status_code() {
  status_code_ = 0u;
  clear_has_status_code();
}
inline ::google::protobuf::uint32 CSPublishTopicRsp::status_code() const {
  return status_code_;
}
inline void CSPublishTopicRsp::set_status_code(::google::protobuf::uint32 value) {
  set_has_status_code();
  status_code_ = value;
}

// -------------------------------------------------------------------

// CSPublishTopicNtf

// required bytes topic = 1;
inline bool CSPublishTopicNtf::has_topic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSPublishTopicNtf::set_has_topic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSPublishTopicNtf::clear_has_topic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSPublishTopicNtf::clear_topic() {
  if (topic_ != &::google::protobuf::internal::kEmptyString) {
    topic_->clear();
  }
  clear_has_topic();
}
inline const ::std::string& CSPublishTopicNtf::topic() const {
  return *topic_;
}
inline void CSPublishTopicNtf::set_topic(const ::std::string& value) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
}
inline void CSPublishTopicNtf::set_topic(const char* value) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
}
inline void CSPublishTopicNtf::set_topic(const void* value, size_t size) {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    topic_ = new ::std::string;
  }
  topic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSPublishTopicNtf::mutable_topic() {
  set_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    topic_ = new ::std::string;
  }
  return topic_;
}
inline ::std::string* CSPublishTopicNtf::release_topic() {
  clear_has_topic();
  if (topic_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = topic_;
    topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CSPublishTopicNtf::set_allocated_topic(::std::string* topic) {
  if (topic_ != &::google::protobuf::internal::kEmptyString) {
    delete topic_;
  }
  if (topic) {
    set_has_topic();
    topic_ = topic;
  } else {
    clear_has_topic();
    topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes content = 2;
inline bool CSPublishTopicNtf::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSPublishTopicNtf::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSPublishTopicNtf::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSPublishTopicNtf::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& CSPublishTopicNtf::content() const {
  return *content_;
}
inline void CSPublishTopicNtf::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void CSPublishTopicNtf::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void CSPublishTopicNtf::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSPublishTopicNtf::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* CSPublishTopicNtf::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CSPublishTopicNtf::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pubsub

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pubsub_2eproto__INCLUDED
