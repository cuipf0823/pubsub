// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pubsub.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pubsub.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pubsub {

namespace {

const ::google::protobuf::Descriptor* CSSubscribeTopicReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSSubscribeTopicReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSSubscribeTopicRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSSubscribeTopicRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPublishTopicReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPublishTopicReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPublishTopicRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPublishTopicRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSPublishTopicNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSPublishTopicNtf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pubsub_2eproto() {
  protobuf_AddDesc_pubsub_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pubsub.proto");
  GOOGLE_CHECK(file != NULL);
  CSSubscribeTopicReq_descriptor_ = file->message_type(0);
  static const int CSSubscribeTopicReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSubscribeTopicReq, topic_),
  };
  CSSubscribeTopicReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSSubscribeTopicReq_descriptor_,
      CSSubscribeTopicReq::default_instance_,
      CSSubscribeTopicReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSubscribeTopicReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSubscribeTopicReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSSubscribeTopicReq));
  CSSubscribeTopicRsp_descriptor_ = file->message_type(1);
  static const int CSSubscribeTopicRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSubscribeTopicRsp, status_code_),
  };
  CSSubscribeTopicRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSSubscribeTopicRsp_descriptor_,
      CSSubscribeTopicRsp::default_instance_,
      CSSubscribeTopicRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSubscribeTopicRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSubscribeTopicRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSSubscribeTopicRsp));
  CSPublishTopicReq_descriptor_ = file->message_type(2);
  static const int CSPublishTopicReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPublishTopicReq, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPublishTopicReq, content_),
  };
  CSPublishTopicReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPublishTopicReq_descriptor_,
      CSPublishTopicReq::default_instance_,
      CSPublishTopicReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPublishTopicReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPublishTopicReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPublishTopicReq));
  CSPublishTopicRsp_descriptor_ = file->message_type(3);
  static const int CSPublishTopicRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPublishTopicRsp, status_code_),
  };
  CSPublishTopicRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPublishTopicRsp_descriptor_,
      CSPublishTopicRsp::default_instance_,
      CSPublishTopicRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPublishTopicRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPublishTopicRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPublishTopicRsp));
  CSPublishTopicNtf_descriptor_ = file->message_type(4);
  static const int CSPublishTopicNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPublishTopicNtf, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPublishTopicNtf, content_),
  };
  CSPublishTopicNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSPublishTopicNtf_descriptor_,
      CSPublishTopicNtf::default_instance_,
      CSPublishTopicNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPublishTopicNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPublishTopicNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPublishTopicNtf));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pubsub_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSSubscribeTopicReq_descriptor_, &CSSubscribeTopicReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSSubscribeTopicRsp_descriptor_, &CSSubscribeTopicRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPublishTopicReq_descriptor_, &CSPublishTopicReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPublishTopicRsp_descriptor_, &CSPublishTopicRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPublishTopicNtf_descriptor_, &CSPublishTopicNtf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pubsub_2eproto() {
  delete CSSubscribeTopicReq::default_instance_;
  delete CSSubscribeTopicReq_reflection_;
  delete CSSubscribeTopicRsp::default_instance_;
  delete CSSubscribeTopicRsp_reflection_;
  delete CSPublishTopicReq::default_instance_;
  delete CSPublishTopicReq_reflection_;
  delete CSPublishTopicRsp::default_instance_;
  delete CSPublishTopicRsp_reflection_;
  delete CSPublishTopicNtf::default_instance_;
  delete CSPublishTopicNtf_reflection_;
}

void protobuf_AddDesc_pubsub_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014pubsub.proto\022\006pubsub\"$\n\023CSSubscribeTop"
    "icReq\022\r\n\005topic\030\001 \002(\014\"*\n\023CSSubscribeTopic"
    "Rsp\022\023\n\013status_code\030\001 \002(\r\"3\n\021CSPublishTop"
    "icReq\022\r\n\005topic\030\001 \002(\014\022\017\n\007content\030\002 \002(\014\"(\n"
    "\021CSPublishTopicRsp\022\023\n\013status_code\030\001 \002(\r\""
    "3\n\021CSPublishTopicNtf\022\r\n\005topic\030\001 \002(\014\022\017\n\007c"
    "ontent\030\002 \002(\014", 252);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pubsub.proto", &protobuf_RegisterTypes);
  CSSubscribeTopicReq::default_instance_ = new CSSubscribeTopicReq();
  CSSubscribeTopicRsp::default_instance_ = new CSSubscribeTopicRsp();
  CSPublishTopicReq::default_instance_ = new CSPublishTopicReq();
  CSPublishTopicRsp::default_instance_ = new CSPublishTopicRsp();
  CSPublishTopicNtf::default_instance_ = new CSPublishTopicNtf();
  CSSubscribeTopicReq::default_instance_->InitAsDefaultInstance();
  CSSubscribeTopicRsp::default_instance_->InitAsDefaultInstance();
  CSPublishTopicReq::default_instance_->InitAsDefaultInstance();
  CSPublishTopicRsp::default_instance_->InitAsDefaultInstance();
  CSPublishTopicNtf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pubsub_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pubsub_2eproto {
  StaticDescriptorInitializer_pubsub_2eproto() {
    protobuf_AddDesc_pubsub_2eproto();
  }
} static_descriptor_initializer_pubsub_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CSSubscribeTopicReq::kTopicFieldNumber;
#endif  // !_MSC_VER

CSSubscribeTopicReq::CSSubscribeTopicReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSSubscribeTopicReq::InitAsDefaultInstance() {
}

CSSubscribeTopicReq::CSSubscribeTopicReq(const CSSubscribeTopicReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSSubscribeTopicReq::SharedCtor() {
  _cached_size_ = 0;
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSubscribeTopicReq::~CSSubscribeTopicReq() {
  SharedDtor();
}

void CSSubscribeTopicReq::SharedDtor() {
  if (topic_ != &::google::protobuf::internal::kEmptyString) {
    delete topic_;
  }
  if (this != default_instance_) {
  }
}

void CSSubscribeTopicReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSSubscribeTopicReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSSubscribeTopicReq_descriptor_;
}

const CSSubscribeTopicReq& CSSubscribeTopicReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pubsub_2eproto();
  return *default_instance_;
}

CSSubscribeTopicReq* CSSubscribeTopicReq::default_instance_ = NULL;

CSSubscribeTopicReq* CSSubscribeTopicReq::New() const {
  return new CSSubscribeTopicReq;
}

void CSSubscribeTopicReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_topic()) {
      if (topic_ != &::google::protobuf::internal::kEmptyString) {
        topic_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSSubscribeTopicReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes topic = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_topic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSubscribeTopicReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes topic = 1;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->topic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSSubscribeTopicReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes topic = 1;
  if (has_topic()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->topic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSSubscribeTopicReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes topic = 1;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->topic());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSubscribeTopicReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSSubscribeTopicReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSSubscribeTopicReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSSubscribeTopicReq::MergeFrom(const CSSubscribeTopicReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_topic()) {
      set_topic(from.topic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSSubscribeTopicReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSubscribeTopicReq::CopyFrom(const CSSubscribeTopicReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSubscribeTopicReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSSubscribeTopicReq::Swap(CSSubscribeTopicReq* other) {
  if (other != this) {
    std::swap(topic_, other->topic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSSubscribeTopicReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSSubscribeTopicReq_descriptor_;
  metadata.reflection = CSSubscribeTopicReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSSubscribeTopicRsp::kStatusCodeFieldNumber;
#endif  // !_MSC_VER

CSSubscribeTopicRsp::CSSubscribeTopicRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSSubscribeTopicRsp::InitAsDefaultInstance() {
}

CSSubscribeTopicRsp::CSSubscribeTopicRsp(const CSSubscribeTopicRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSSubscribeTopicRsp::SharedCtor() {
  _cached_size_ = 0;
  status_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSubscribeTopicRsp::~CSSubscribeTopicRsp() {
  SharedDtor();
}

void CSSubscribeTopicRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSSubscribeTopicRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSSubscribeTopicRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSSubscribeTopicRsp_descriptor_;
}

const CSSubscribeTopicRsp& CSSubscribeTopicRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pubsub_2eproto();
  return *default_instance_;
}

CSSubscribeTopicRsp* CSSubscribeTopicRsp::default_instance_ = NULL;

CSSubscribeTopicRsp* CSSubscribeTopicRsp::New() const {
  return new CSSubscribeTopicRsp;
}

void CSSubscribeTopicRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSSubscribeTopicRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 status_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_code_)));
          set_has_status_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSubscribeTopicRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 status_code = 1;
  if (has_status_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSSubscribeTopicRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 status_code = 1;
  if (has_status_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSSubscribeTopicRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 status_code = 1;
    if (has_status_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSubscribeTopicRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSSubscribeTopicRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSSubscribeTopicRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSSubscribeTopicRsp::MergeFrom(const CSSubscribeTopicRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status_code()) {
      set_status_code(from.status_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSSubscribeTopicRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSubscribeTopicRsp::CopyFrom(const CSSubscribeTopicRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSubscribeTopicRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSSubscribeTopicRsp::Swap(CSSubscribeTopicRsp* other) {
  if (other != this) {
    std::swap(status_code_, other->status_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSSubscribeTopicRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSSubscribeTopicRsp_descriptor_;
  metadata.reflection = CSSubscribeTopicRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPublishTopicReq::kTopicFieldNumber;
const int CSPublishTopicReq::kContentFieldNumber;
#endif  // !_MSC_VER

CSPublishTopicReq::CSPublishTopicReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPublishTopicReq::InitAsDefaultInstance() {
}

CSPublishTopicReq::CSPublishTopicReq(const CSPublishTopicReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPublishTopicReq::SharedCtor() {
  _cached_size_ = 0;
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPublishTopicReq::~CSPublishTopicReq() {
  SharedDtor();
}

void CSPublishTopicReq::SharedDtor() {
  if (topic_ != &::google::protobuf::internal::kEmptyString) {
    delete topic_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void CSPublishTopicReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPublishTopicReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPublishTopicReq_descriptor_;
}

const CSPublishTopicReq& CSPublishTopicReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pubsub_2eproto();
  return *default_instance_;
}

CSPublishTopicReq* CSPublishTopicReq::default_instance_ = NULL;

CSPublishTopicReq* CSPublishTopicReq::New() const {
  return new CSPublishTopicReq;
}

void CSPublishTopicReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_topic()) {
      if (topic_ != &::google::protobuf::internal::kEmptyString) {
        topic_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPublishTopicReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes topic = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_topic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // required bytes content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPublishTopicReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes topic = 1;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->topic(), output);
  }

  // required bytes content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPublishTopicReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes topic = 1;
  if (has_topic()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->topic(), target);
  }

  // required bytes content = 2;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPublishTopicReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes topic = 1;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->topic());
    }

    // required bytes content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPublishTopicReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPublishTopicReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPublishTopicReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPublishTopicReq::MergeFrom(const CSPublishTopicReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_topic()) {
      set_topic(from.topic());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPublishTopicReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPublishTopicReq::CopyFrom(const CSPublishTopicReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPublishTopicReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSPublishTopicReq::Swap(CSPublishTopicReq* other) {
  if (other != this) {
    std::swap(topic_, other->topic_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPublishTopicReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPublishTopicReq_descriptor_;
  metadata.reflection = CSPublishTopicReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPublishTopicRsp::kStatusCodeFieldNumber;
#endif  // !_MSC_VER

CSPublishTopicRsp::CSPublishTopicRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPublishTopicRsp::InitAsDefaultInstance() {
}

CSPublishTopicRsp::CSPublishTopicRsp(const CSPublishTopicRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPublishTopicRsp::SharedCtor() {
  _cached_size_ = 0;
  status_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPublishTopicRsp::~CSPublishTopicRsp() {
  SharedDtor();
}

void CSPublishTopicRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPublishTopicRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPublishTopicRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPublishTopicRsp_descriptor_;
}

const CSPublishTopicRsp& CSPublishTopicRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pubsub_2eproto();
  return *default_instance_;
}

CSPublishTopicRsp* CSPublishTopicRsp::default_instance_ = NULL;

CSPublishTopicRsp* CSPublishTopicRsp::New() const {
  return new CSPublishTopicRsp;
}

void CSPublishTopicRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPublishTopicRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 status_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_code_)));
          set_has_status_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPublishTopicRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 status_code = 1;
  if (has_status_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPublishTopicRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 status_code = 1;
  if (has_status_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPublishTopicRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 status_code = 1;
    if (has_status_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPublishTopicRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPublishTopicRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPublishTopicRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPublishTopicRsp::MergeFrom(const CSPublishTopicRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status_code()) {
      set_status_code(from.status_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPublishTopicRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPublishTopicRsp::CopyFrom(const CSPublishTopicRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPublishTopicRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSPublishTopicRsp::Swap(CSPublishTopicRsp* other) {
  if (other != this) {
    std::swap(status_code_, other->status_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPublishTopicRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPublishTopicRsp_descriptor_;
  metadata.reflection = CSPublishTopicRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPublishTopicNtf::kTopicFieldNumber;
const int CSPublishTopicNtf::kContentFieldNumber;
#endif  // !_MSC_VER

CSPublishTopicNtf::CSPublishTopicNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSPublishTopicNtf::InitAsDefaultInstance() {
}

CSPublishTopicNtf::CSPublishTopicNtf(const CSPublishTopicNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPublishTopicNtf::SharedCtor() {
  _cached_size_ = 0;
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPublishTopicNtf::~CSPublishTopicNtf() {
  SharedDtor();
}

void CSPublishTopicNtf::SharedDtor() {
  if (topic_ != &::google::protobuf::internal::kEmptyString) {
    delete topic_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void CSPublishTopicNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSPublishTopicNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPublishTopicNtf_descriptor_;
}

const CSPublishTopicNtf& CSPublishTopicNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pubsub_2eproto();
  return *default_instance_;
}

CSPublishTopicNtf* CSPublishTopicNtf::default_instance_ = NULL;

CSPublishTopicNtf* CSPublishTopicNtf::New() const {
  return new CSPublishTopicNtf;
}

void CSPublishTopicNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_topic()) {
      if (topic_ != &::google::protobuf::internal::kEmptyString) {
        topic_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPublishTopicNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes topic = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_topic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // required bytes content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPublishTopicNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes topic = 1;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->topic(), output);
  }

  // required bytes content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSPublishTopicNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes topic = 1;
  if (has_topic()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->topic(), target);
  }

  // required bytes content = 2;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPublishTopicNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes topic = 1;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->topic());
    }

    // required bytes content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPublishTopicNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPublishTopicNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSPublishTopicNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPublishTopicNtf::MergeFrom(const CSPublishTopicNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_topic()) {
      set_topic(from.topic());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPublishTopicNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPublishTopicNtf::CopyFrom(const CSPublishTopicNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPublishTopicNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSPublishTopicNtf::Swap(CSPublishTopicNtf* other) {
  if (other != this) {
    std::swap(topic_, other->topic_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSPublishTopicNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSPublishTopicNtf_descriptor_;
  metadata.reflection = CSPublishTopicNtf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pubsub

// @@protoc_insertion_point(global_scope)
